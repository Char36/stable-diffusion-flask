# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- deploy

parameters:
  - name: runInfrastructure
    type: boolean
    default: true

pool:
  vmImage: ubuntu-latest

variables:
  - name: resourceGroupName
    value: 'sd-rg-dev'
  - name: deploy
    value: $[ ne(variables['Build.Reason'], 'PullRequest') ]
  - group: 'sd-vm-secrets'

jobs:
  - job: compile
    displayName: 'compile'
    workspace:
      clean: all
    steps:
      - checkout: self
        clean: true

      - task: PowerShell@2
        displayName: 'Compile app'
        inputs: 
          targetType: 'inline'
          failOnStderr: true
          script: |
            cd .\app\
            python -m py_compile main.py

            Write-Host 'Compiled successfully'


  - ${{ if variables.deploy }}:
    - job: infrastructure
      displayName: 'Build artifact and deploy bicep'
      workspace:
        clean: all
      steps:
        - task: ArchiveFiles@2
          displayName: 'Archive application'
          inputs:
            rootFolderOrFile: '$(Build.SourcesDirectory)' 
            includeRootFolder: false 
            archiveType: 'tar' # Options: zip, 7z, tar, wim
            tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tar.gz' 
            replaceExistingArchive: true 
            verbose: false
    
        - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).tar.gz
          artifact: drop

        - task: AzureCLI@2
          displayName: 'Run Bicep'
          name: bicep
          condition: ${{ parameters.runInfrastructure }}
          env:
            VM_PASSWORD: $(SdVMPassword)
            GIT_PASSWORD: $(gitPassword)
            GIT_PAT: $(gitPat)
            PERSONAL_ACCESS_TOKEN: $(pat)

          inputs:
            scriptType: pscore
            azureSubscription: 'c36-sp-dev'
            scriptLocation: 'inlineScript'
            failOnStandardError: true
            inlineScript:  |
              az group create `
              --name '${{ variables.resourceGroupName }}' `
              --location eastus
              
              $output = az deployment group create `
                --name New-Guid `
                --resource-group '${{ variables.resourceGroupName }}' `
                --mode Incremental `
                --template-file $(Build.SourcesDirectory)/bicep/main.bicep `
                --parameters $(Build.SourcesDirectory)/bicep/environments/development.parameters.json `
                --parameters adminPasswordOrKey=$Env:VM_PASSWORD `
                --parameters adoPersonalAccessToken=$Env:PERSONAL_ACCESS_TOKEN | ConvertFrom-Json;
              
              # echo output
              
              # Get-WindowsCapability -Online | Where-Object Name -like 'OpenSSH*'
              # Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0
                
              # Start-Service sshd
              # Set-Service -Name sshd -StartupType 'Automatic'
              
              # # Confirm the Firewall rule is configured. It should be created automatically by setup. Run the following to verify
              # if (!(Get-NetFirewallRule -Name "OpenSSH-Server-In-TCP" -ErrorAction SilentlyContinue | Select-Object Name, Enabled)) {
              #   Write-Output "Firewall Rule 'OpenSSH-Server-In-TCP' does not exist, creating it..."
              #   New-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
              # }
              # else {
              #   Write-Output "Firewall rule 'OpenSSH-Server-In-TCP' has been created and exists."
              # }
              
              # $sshUsername = $output.adminUsername
              # $hostName = $output.vm_fqdn
              
              # if (-not($sshUsername)) {
              #   echo "##[error] missing sshUsername from bicep output";
              #   exit 1;
              # }
              
              # if (-not($hostName)) {
              #   echo "##[error] missing hostName from bicep output";
              #   exit 1;
              # }
              
              # $session = New-PSSession -HostName $hostName -UserName $sshUsername
              # $session
              # Enter-PSSession $session -Credential (New-object PSCredential -ArgumentList @($sshUsername, ($VM_PASSWORD|ConvertTo-secureString -AsPlainText -Force)))
              # Invoke-Command $session -ScriptBlock { 
              #   $ErrorActionPreference="Stop";If(-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent() ).IsInRole( [Security.Principal.WindowsBuiltInRole] "Administrator")){ throw "Run command in an administrator PowerShell prompt"};If($PSVersionTable.PSVersion -lt (New-Object System.Version("3.0"))){ throw "The minimum version of Windows PowerShell that is required by the script (3.0) does not match the currently running version of Windows PowerShell." };If(-NOT (Test-Path $env:SystemDrive\'azagent')){mkdir $env:SystemDrive\'azagent'}; cd $env:SystemDrive\'azagent'; for($i=1; $i -lt 100; $i++){$destFolder="A"+$i.ToString();if(-NOT (Test-Path ($destFolder))){mkdir $destFolder;cd $destFolder;break;}}; $agentZip="$PWD\agent.zip";$DefaultProxy=[System.Net.WebRequest]::DefaultWebProxy;$securityProtocol=@();$securityProtocol+=[Net.ServicePointManager]::SecurityProtocol;$securityProtocol+=[Net.SecurityProtocolType]::Tls12;[Net.ServicePointManager]::SecurityProtocol=$securityProtocol;$WebClient=New-Object Net.WebClient; $Uri='https://vstsagentpackage.azureedge.net/agent/2.213.2/vsts-agent-win-x64-2.213.2.zip';if($DefaultProxy -and (-not $DefaultProxy.IsBypassed($Uri))){$WebClient.Proxy= New-Object Net.WebProxy($DefaultProxy.GetProxy($Uri).OriginalString, $True);}; $WebClient.DownloadFile($Uri, $agentZip);Add-Type -AssemblyName System.IO.Compression.FileSystem;[System.IO.Compression.ZipFile]::ExtractToDirectory( $agentZip, "$PWD");.\config.cmd --environment --environmentname "sd-vm-dev" --agent $env:COMPUTERNAME --runasservice --work '_work' --url 'https://dev.azure.com/adeane999/' --projectname 'Stable Diffusion' --auth PAT --token $personalAccessToken; Remove-Item $agentZip;
              # }

  - ${{ if eq(variables.deploy, 'true') }}:
    - deployment: vmDeploy
      displayName: deploy
      dependsOn: infrastructure
      variables:
        sshCmd: $[ dependencies.infrastructure.outputs['bicep.sshCmd'] ]
      pool:
      vmImage: 'ubuntu-latest'
      environment:
        name: 'sd-vm-dev'
        resourceType: VirtualMachine
      strategy:
      runOnce:
  #      preDeploy:
  #        steps:
  #          - download: current
  #            artifact: drop
  #
  #          - task: PowerShell@2
  #            displayName: 'Register environment'
  #            env:
  #              VM_PASSWORD: $(pat)
  #            inputs:
  #              pwsh: true
  #              targetType: 'filePath'
  #              filePath: $(Build.SourcesDirectory)/azp/register.ps1
        deploy:
          steps:
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |
                  # Modify deployment script based on the app type
                  echo "Starting deployment script run"
                  tar -xf drop.tar.gz -C ./artifact
                  cd ./artifact/app
                  ls

                  # if [ -z "$sshCmd" ];
                  # then
                  #   echo "##[error] missing ssh command from bicep output"
                  #   exit 1;
                  # fi

                  # sshpass -p "$SdVMPassword" "$sshCmd"

                  sudo apt-get install libapache2-mod-wsgi-py3  #for python 3
                  sudo apt-get -y install python3 python3-dev
                  sudo apt-get -y install nginx
                  
                  wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh
                  yes no | ./Anaconda3-2022.05-Linux-x86_64.sh

    
    
    #                 eval "$(conda shell.bash hook)"
    #                 conda env create -f environment.yaml
    #                 conda activate ldm2

    #                 python -m flask run --port=80 --app main