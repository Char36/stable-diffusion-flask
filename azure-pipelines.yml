# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- deploy

pool:
  vmImage: ubuntu-latest

variables:
  - name: resourceGroupName
    value: 'sd-rg-dev'
  - group: 'sd-vm-secrets'

jobs:
  - job: 
    displayName: 'Build artifact and deploy bicep'
    name: infrastructure
    workspace:
      clean: all
    steps:
      - task: ArchiveFiles@2
        displayName: 'Archive application'
        inputs:
          rootFolderOrFile: '$(Build.SourcesDirectory)' 
          includeRootFolder: false 
          archiveType: 'tar' # Options: zip, 7z, tar, wim
          tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tar.gz' 
          replaceExistingArchive: true 
          verbose: true
   
      - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).tar.gz
        artifact: drop

      - task: AzureCLI@2
        displayName: 'Run Bicep'
        name: bicep
        env:
          VM_PASSWORD: $(SdVMPassword)
          GIT_PASSWORD: $(gitPassword)
          GIT_PAT: $(gitPat)
        inputs:
          scriptType: bash
          azureSubscription: 'c36-sp-dev'
          scriptLocation: 'inlineScript'
          failOnStandardError: true
          inlineScript:  |
            az group create \
              --name '${{ variables.resourceGroupName }}' \
              --location eastus
  
            output=$(az deployment group create \
              --name New-Guid \
              --resource-group '${{ variables.resourceGroupName }}' \
              --template-file $(Build.SourcesDirectory)/bicep/main.bicep \
              --parameters $(Build.SourcesDirectory)/bicep/environments/development.parameters.json \
              --parameters adminPasswordOrKey=$VM_PASSWORD \
              --parameters gitPassword=$GIT_PASSWORD)
            
            echo $output
  
            sudo apt-get update
            sudo apt-get install sshpass
            sudo apt-get install jq
  
            sshCmd=$(echo "$output" | jq -r '.sshCommand')
  
            if [ -z "$sshCmd" ];
            then
              echo "##[error] missing ssh command from bicep output"
              exit 1;
            fi
  
            echo "##vso[task.setvariable variable=sshCmd;isoutput=true;issecret=true]$sshCmd"
            
            #          sudo apt-get install git-all
            #          git clone https://alexdeane:$GIT_PASSWORD@github.com/Char36/stable-diffusion-flask
            #          cd ./stable-diffusion-flask/app/
            
            #          eval "$(conda shell.bash hook)"
            #          conda env create -f environment.yaml
            #          conda activate ldm2
  
            # python -m flask run --port=80 --app main
  
      - task: PowerShell@2
        displayName: 'Register environment'
        env:
          VM_PASSWORD: $(pat)
        inputs:
          pwsh: true
          targetType: 'filePath'
          filePath:  $(Build.SourcesDirectory)\azp\register.ps1

  - deployment: vmDeploy
    displayName: deploy
    dependsOn: infrastructure
    variables:
      sshCmd: $[ dependencies.infrastructure.outputs['bicep.sshCmd'] ]
    pool:
     vmImage: 'ubuntu-latest'
    environment:
      name:  'sd-vm-dev'
      resourceType: VirtualMachine
      tags: web
    strategy:
     runOnce:
       predeploy:
         steps:
           - download: current
             artifact: drop
       deploy:
         steps:
           - task: Bash@3
             inputs:
               targetType: 'inline'
               script: |
                 # Modify deployment script based on the app type
                 echo "Starting deployment script run"
                 tar -xf drop.tar.gz -C ./artifact
                 cd ./artifact/app
                 ls

                 if [ -z "$sshCmd" ];
                 then
                   echo "##[error] missing ssh command from bicep output"
                   exit 1;
                 fi
 
                 # sshpass -p "$SdVMPassword" "$sshCmd"

                 sudo apt-get install libapache2-mod-wsgi-py3  #for python 3
                 sudo apt-get -y install python3 python3-dev
                 sudo apt-get -y install nginx
                 
                 wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh
                 yes no | ./Anaconda3-2022.05-Linux-x86_64.sh
  
  
  #                 eval "$(conda shell.bash hook)"
  #                 conda env create -f environment.yaml
  #                 conda activate ldm2

  #                 python -m flask run --port=80 --app main