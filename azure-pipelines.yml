# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  - name: resourceGroupName
    value: 'sd-rg-dev'
  - group: 'sd-vm-secrets'

jobs:
  - job: 
    displayName: 'Build artifact and deploy bicep'
    workspace:
      clean: all
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive application'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)' 
        includeRootFolder: false 
        archiveType: 'tar' # Options: zip, 7z, tar, wim
        tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tar.gz' 
        replaceExistingArchive: true 
        verbose: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).tar.gz
      artifact: drop

    - task: AzurePowerShell@5
      displayName: 'Run Bicep'
      inputs:
        azureSubscription: 'c36-sp-dev'
        azurePowerShellVersion: 'LatestVersion'
        scriptType: 'inlineScript'
        inline: |
          New-AzResourceGroup `
            -Name sd-rg-dev `
            -Location 'eastus' `
            -Force

          New-AzResourceGroupDeployment `
            -Name New-Guid `
            -ResourceGroupName '${{ variables.resourceGroupName }}' `
            -TemplateFile '$(Build.SourcesDirectory)/bicep/main.bicep' `
            -TemplateParameterFile '$(Build.SourcesDirectory)/bicep/environments/development.parameters.json' `
            -Force `
            -adminPasswordOrKey '$(variables.SdVMPassword)' `
            -gitPassword '$(variables.gitPassword)'

  # - deployment: vmDeploy
  #   displayName: deploy
  #   pool:
  #     vmImage: 'ubuntu-latest'
  #   # environment:
  #   #   name:  'sd-vm-dev'
  #   #   resourceType: VirtualMachine
  #   #   tags: web
  #   strategy:
  #     runOnce:
  #       preDeploy:
  #         steps:
  #           - download: current
  #             artifact: drop
  #       deploy:
  #         steps:
  #           - task: Bash@3
  #             inputs:
  #               targetType: 'inline'
  #               script: |
  #                 # Modify deployment script based on the app type
  #                 echo "Starting deployment script run"
  #                 tar -xf drop.tar.gz -C ./artifact
  #                 cd ./artifact/app

  #                 eval "$(conda shell.bash hook)"
  #                 conda env create -f environment.yaml
  #                 conda activate ldm2

  #                 python -m flask run --port=80 --app main