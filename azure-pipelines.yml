# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- deploy

parameters:
  - name: runInfrastructure
    type: boolean
    default: true

pool:
  vmImage: ubuntu-latest

variables:
  - name: resourceGroupName
    value: 'sd-rg-dev'
  - name: deploy
    value: $[ ne(variables['Build.Reason'], 'PullRequest') ]
  - group: 'sd-vm-secrets'

jobs:
  - job: compile
    displayName: 'compile'
    workspace:
      clean: all
    steps:
      - checkout: self
        clean: true

      - task: PowerShell@2
        displayName: 'Compile app'
        inputs: 
          targetType: 'inline'
          failOnStderr: true
          script: |
            cd .\app\
            python -m py_compile main.py

            Write-Host 'Compiled successfully'


  - ${{ if variables.deploy }}:
    - job: infrastructure
      displayName: 'Build artifact and deploy bicep'
      workspace:
        clean: all
      steps:
        - task: ArchiveFiles@2
          displayName: 'Archive application'
          inputs:
            rootFolderOrFile: '$(Build.SourcesDirectory)' 
            includeRootFolder: false 
            archiveType: 'tar' # Options: zip, 7z, tar, wim
            tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tar.gz' 
            replaceExistingArchive: true 
            verbose: false
    
        - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).tar.gz
          artifact: drop

        - task: AzureCLI@2
          displayName: 'Run Bicep'
          name: bicep
          condition: ${{ parameters.runInfrastructure }}
          env:
            VM_PASSWORD: $(SdVMPassword)
            GIT_PASSWORD: $(gitPassword)
            GIT_PAT: $(gitPat)
            personalAccessToken: $(pat)

          inputs:
            scriptType: pscore
            azureSubscription: 'c36-sp-dev'
            scriptLocation: 'inlineScript'
            failOnStandardError: true
            inlineScript:  |
              az group create `
              --name '${{ variables.resourceGroupName }}' `
              --location eastus
              
              $output = az deployment group create `
                --name New-Guid `
                --resource-group '${{ variables.resourceGroupName }}' `
                --mode Incremental `
                --template-file $(Build.SourcesDirectory)/bicep/main.bicep `
                --parameters $(Build.SourcesDirectory)/bicep/environments/development.parameters.json `
                --parameters adminPasswordOrKey=$Env:VM_PASSWORD | ConvertFrom-Json;
              
              echo output
              
              Get-WindowsCapability -Online | Where-Object Name -like 'OpenSSH*'
              Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0
                
              Start-Service sshd
              Set-Service -Name sshd -StartupType 'Automatic'
              
              # Confirm the Firewall rule is configured. It should be created automatically by setup. Run the following to verify
              if (!(Get-NetFirewallRule -Name "OpenSSH-Server-In-TCP" -ErrorAction SilentlyContinue | Select-Object Name, Enabled)) {
                Write-Output "Firewall Rule 'OpenSSH-Server-In-TCP' does not exist, creating it..."
                New-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
              }
              else {
                Write-Output "Firewall rule 'OpenSSH-Server-In-TCP' has been created and exists."
              }
              
              $sshUsername = $output.adminUsername
              $hostName = $output.vm_fqdn
              
              if (-not($sshUsername)) {
                echo "##[error] missing sshUsername from bicep output";
                exit 1;
              }
              
              if (-not($hostName)) {
                echo "##[error] missing hostName from bicep output";
                exit 1;
              }
              
              $session = New-PSSession -HostName $hostName -UserName $sshUsername
              $session
              Enter-PSSession $session -Credential (New-object PSCredential -ArgumentList @($sshUsername, ($VM_PASSWORD|ConvertTo-secureString -AsPlainText -Force)))
              Invoke-Command $session -ScriptBlock { 
                mkdir azagent;cd azagent;curl -fkSL -o vstsagent.tar.gz https://vstsagentpackage.azureedge.net/agent/2.211.1/vsts-agent-linux-x64-2.211.1.tar.gz;tar -zxvf vstsagent.tar.gz; if [ -x "'"'"$(command -v systemctl)"'"'" ]; then ./config.sh --environment --environmentname "'"'"sd-vm-dev"'"'" --acceptteeeula --agent $HOSTNAME --url https://dev.azure.com/adeane999/ --work _work --projectname 'Stable Diffusion' --auth PAT --token $personalAccessToken --runasservice; sudo ./svc.sh install; sudo ./svc.sh start; else ./config.sh --environment --environmentname "'"'"sd-vm-dev"'"'" --acceptteeeula --agent sdserver --url https://dev.azure.com/adeane999/ --work _work --projectname 'Stable Diffusion' --auth PAT --token $personalAccessToken; ./run.sh; fi;
              }

  - ${{ if eq(variables.deploy, 'true') }}:
    - deployment: vmDeploy
      displayName: deploy
      dependsOn: infrastructure
      variables:
        sshCmd: $[ dependencies.infrastructure.outputs['bicep.sshCmd'] ]
      pool:
      vmImage: 'ubuntu-latest'
      environment:
        name: 'sd-vm-dev'
        resourceType: VirtualMachine
      strategy:
      runOnce:
  #      preDeploy:
  #        steps:
  #          - download: current
  #            artifact: drop
  #
  #          - task: PowerShell@2
  #            displayName: 'Register environment'
  #            env:
  #              VM_PASSWORD: $(pat)
  #            inputs:
  #              pwsh: true
  #              targetType: 'filePath'
  #              filePath: $(Build.SourcesDirectory)/azp/register.ps1
        deploy:
          steps:
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |
                  # Modify deployment script based on the app type
                  echo "Starting deployment script run"
                  tar -xf drop.tar.gz -C ./artifact
                  cd ./artifact/app
                  ls

                  # if [ -z "$sshCmd" ];
                  # then
                  #   echo "##[error] missing ssh command from bicep output"
                  #   exit 1;
                  # fi

                  # sshpass -p "$SdVMPassword" "$sshCmd"

                  sudo apt-get install libapache2-mod-wsgi-py3  #for python 3
                  sudo apt-get -y install python3 python3-dev
                  sudo apt-get -y install nginx
                  
                  wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh
                  yes no | ./Anaconda3-2022.05-Linux-x86_64.sh

    
    
    #                 eval "$(conda shell.bash hook)"
    #                 conda env create -f environment.yaml
    #                 conda activate ldm2

    #                 python -m flask run --port=80 --app main